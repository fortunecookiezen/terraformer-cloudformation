AWSTemplateFormatVersion: "2010-09-09"
Description: "Configure SNS topics to subscribe to specific CloudFormation notifications and forward them to users"
Parameters:
  ASI:
    Type: String
    MinLength: 2
    MaxLength: 4
    Description: "asi - must be lower-case, limit 4 characters"
    AllowedPattern: "[a-z]*"
  Environment:
    Type: String
    MinLength: 3
    MaxLength: 7
    Description: "environment (nonprod|dev|itg|cat|prod) - must be lower-case, limit 7 characters"
    AllowedPattern: "[a-z]*"
  Owner:
    Type: String
    Description: "email address of the the Owner of this stack"
    Default: "admin@root.com"
    AllowedPattern: "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Environment Configuration"
        Parameters:
        - ASI
        - Environment
        - Owner

Resources:
  # SNS topic to send emails to users (used inside Lambda function)
  SNSTopicEmail:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !Ref Owner
          Protocol: "email"

  # IAM role and inline policy for Lambda function
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "cloudformation-notifications-lambda-role-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: !Ref "SNSTopicEmail"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              -
                Effect: "Allow"
                Action:
                  - "xray:PutTelemetryRecords"
                  - "xray:PutTraceSegments"
                Resource: "*"

  # Lambda function to catch CloudFormation events (forwarded by SNS) and create new SNS notifications from them
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${ASI}-${Environment}-cf-notifications-lambda"
      Description: "Forward CloudFormation notifications to SNS topic"
      Handler: "index.handler"
      Role: !GetAtt "LambdaRole.Arn"
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref "SNSTopicEmail"
          NOTIFICATION_TYPES: "CREATE_COMPLETE,UPDATE_COMPLETE,ROLLBACK_IN_PROGRESS"
      Code:
        ZipFile: |
            import os
            import boto3

            def handler(event, context):
                # Notification types
                env_notification_types = os.getenv("NOTIFICATION_TYPES", None)
                notification_types = env_notification_types.split(",") if env_notification_types else None
                if not notification_types:
                    print("At least one CloudFormation notification type needs to be specified")
                    return

                # SNS topic ARN
                sns_topic_arn = os.getenv("SNS_TOPIC_ARN", None)
                if not sns_topic_arn:
                    print("The ARN of the SNS topic needs to be specified")
                    return

                try:
                    message = str(event["Records"][0]["Sns"]["Message"]).replace("\n", ",")
                except Exception:
                    print("Message could not be parsed. Event: %s" % (event))
                    return

                # Ignore resources that are not the CloudFormation stack itself
                if "ResourceType='AWS::CloudFormation::Stack'" not in message:
                    return

                for notification_type in notification_types:
                    if notification_type not in message:
                        continue

                    sns_subject = "CloudFormation %s" % (notification_type)
                    sns_message = message.replace(",", "\n")
                    boto3.client('sns').publish(
                        Subject=sns_subject,
                        Message=sns_message,
                        TopicArn=sns_topic_arn
                    )
      Runtime: "python3.6"
      Timeout: 90
      TracingConfig:
        Mode: "Active"

  # SNS topic and inline subscription to forward events to Lambda function
  CloudFormationTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !GetAtt "LambdaFunction.Arn"
          Protocol: "lambda"

  # Lambda permission to allow SNS to forward events to Lambda function
  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref "CloudFormationTopic"
      FunctionName: !GetAtt "LambdaFunction.Arn"

Outputs:
  CloudFormationTopic:
    Description: "ARN of CloudFormation SNS topic - use this value with --notification-arns when creating other stacks"
    Value: !Ref "CloudFormationTopic"
    Export:
      Name: !Sub "${ASI}-${Environment}-cf-notification-topic"